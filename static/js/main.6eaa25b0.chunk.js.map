{"version":3,"sources":["hooks/useSimonSays/useSimonSays.js","components/GameButton/GameButton.js","components/App/App.js","serviceWorker.js","index.js","components/App/App.module.css","components/GameButton/GameButton.module.css"],"names":["STATE","SETUP","PLAY","END","BUTTONS","number","color","randomButton","sample","PHRASE","COLOR","NUMBER","randomPhrase","GAME_LOSS_TYPE","BUTTON","TIME","SIMON","TIMEOUT","GameButton","button","onClick","className","styles","App","useState","gameState","setGameState","challengeIndex","setChallengeIndex","goalButton","setGoalButton","simonSays","setSimonSays","phrase","setPhrase","lossType","setLossType","endGame","useCallback","gameLossType","nextChallenge","newPhrase","newGoalButton","newSimonSays","isEqual","index","useEffect","challengeTimeout","setTimeout","clearTimeout","buttons","onButtonClick","message","buttonDescription","getGameMessage","gameInfo","style","textAlign","getInfo","useSimonSays","root","header","gameMessage","chunk","Math","ceil","length","map","buttonRow","rowIndex","key","Boolean","window","location","hostname","match","ReactDOM","render","body","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.6eaa25b0.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { sample, isEqual } from 'lodash'\n\nconst STATE = {\n  SETUP: 'SETUP',\n  PLAY: 'PLAY',\n  END: 'END'\n}\n\n// Buttons can be colored yellow, red, blue, green, purple, orange, pink\nconst BUTTONS = [\n  { number: 1, color: 'yellow' },\n  { number: 2, color: 'red' },\n  { number: 3, color: 'blue' },\n  { number: 4, color: 'green' }\n]\nconst randomButton = () => sample(BUTTONS)\n\n// The attribute that Simon uses to describe the button.\nconst PHRASE = {\n  COLOR: 'COLOR',\n  NUMBER: 'NUMBER'\n}\nconst randomPhrase = () => sample(PHRASE)\n\nconst GAME_LOSS_TYPE = {\n  BUTTON: 'BUTTON',\n  TIME: 'TIME',\n  SIMON: 'SIMON'\n}\n\nconst TIMEOUT = 2000\n\nexport default function useSimonSays() {\n  const [gameState, setGameState] = useState(STATE.SETUP)\n  const [challengeIndex, setChallengeIndex] = useState(0)\n\n  const [goalButton, setGoalButton] = useState(randomButton())\n  const [simonSays, setSimonSays] = useState(true)\n  const [phrase, setPhrase] = useState(randomPhrase())\n\n  const [lossType, setLossType] = useState('')\n\n  const endGame = useCallback(gameLossType => {\n    setLossType(gameLossType)\n    setGameState(STATE.END)\n  }, [setLossType, setGameState])\n\n  // Count a success and present the user with the next challenge.\n  const nextChallenge = useCallback(() => {\n    const newPhrase = randomPhrase()\n    const newGoalButton = randomButton()\n    const newSimonSays = sample(\n      // Slightly more likely to get Simon than not.\n      [true, true, true, false, false]\n    )\n\n    if (newPhrase === phrase &&\n      isEqual(newGoalButton, goalButton) &&\n      newSimonSays === simonSays\n    ) {\n      // Challenge did not change, so reroll.\n      nextChallenge()\n    } else {\n      setChallengeIndex(index => index + 1)\n      setPhrase(newPhrase)\n      setGoalButton(newGoalButton)\n      setSimonSays(newSimonSays)\n    }\n  }, [phrase, goalButton, simonSays])\n\n  const onButtonClick = (button) => {\n    // Restart the game when it's done.\n    if (gameState === STATE.END) {\n      setGameState(STATE.PLAY)\n      setChallengeIndex(0)\n      return\n    }\n\n    // Enable timed responses after the first response.\n    if (gameState === STATE.SETUP) {\n      setGameState(STATE.PLAY)\n    }\n\n    // Check the clicked button against the challenge.\n    if (!simonSays) {\n      endGame(GAME_LOSS_TYPE.SIMON)\n    } else if (isEqual(button, goalButton)) {\n      nextChallenge()\n    } else {\n      endGame(GAME_LOSS_TYPE.BUTTON)\n    }\n  }\n\n  useEffect(() => {\n    // Only time the challenges once the user has started playing.\n    if (gameState !== STATE.PLAY) {\n      return\n    }\n\n    const challengeTimeout = setTimeout(\n      () => {\n        // Missed Simon-says challenge.\n        if (simonSays) {\n          endGame(GAME_LOSS_TYPE.TIME)\n        } else {\n          // They successfully didn't complete a nonSimon challenge.\n          nextChallenge()\n        }\n      }, TIMEOUT\n    )\n    return () => clearTimeout(challengeTimeout)\n  }, [challengeIndex, gameState, simonSays, endGame, nextChallenge])\n\n  // Get a string describing the current challenge or loss type.\n  const getGameMessage = () => {\n    const buttonDescription =\n      phrase === PHRASE.COLOR ?\n        `the ${goalButton.color} button` :\n        `button number ${goalButton.number}`\n\n    switch (gameState) {\n      case STATE.END:\n        if (lossType === GAME_LOSS_TYPE.BUTTON) {\n          return 'You pressed the wrong button.'\n        } else if (lossType === GAME_LOSS_TYPE.SIMON) {\n          return \"I didn't say Simon says!\"\n        } else {\n          return 'You took too long to respond!'\n        }\n\n      case STATE.SETUP:\n      case STATE.PLAY:\n      default:\n        return (\n          `${\n            simonSays ? 'Simon says press' : 'Press'\n          } ${buttonDescription}`\n        )\n    }\n  }\n\n  // Get additional info for the beginning or end of the game.\n  const getInfo = () => {\n    switch (gameState) {\n      case STATE.SETUP:\n        return <>\n          <p>Simply press the buttons that Simon asks you to.</p>\n          <p><strong>You lose</strong> if you:</p>\n          <ul style={{ textAlign: 'left' }}>\n            <li>Press the wrong button</li>\n            <li>Do anything without Simon</li>\n            <li>Take too long</li>\n          </ul>\n          </>\n      case STATE.END:\n        return <>\n          <p>You made it through {challengeIndex} challenge{challengeIndex === 1 ? '' : 's'}.</p>\n          <p>Press any button to restart.</p>\n        </>\n      default:\n        return ''\n    }\n  }\n\n  return (\n    { buttons: BUTTONS\n    , onButtonClick\n    , message: getGameMessage()\n    , gameInfo: getInfo()\n    }\n  )\n}","import React from 'react';\nimport styles from './GameButton.module.css';\n\nexport default function GameButton({ button, onClick }) {\n  const { number, color } = button\n  return (\n    <button\n      className={styles[`${color}GameButton`]}\n      onClick={() => onClick(button)}\n    >\n      { number }\n    </button>\n  );\n}\n","import React from 'react';\nimport styles from './App.module.css';\nimport useSimonSays from '../../hooks/useSimonSays/useSimonSays';\nimport GameButton from '../GameButton/GameButton';\nimport { chunk } from 'lodash'\n\nfunction App() {\n  const { buttons, onButtonClick, message, gameInfo } = useSimonSays()\n  return (\n    <div className={styles.root}>\n      <header className={styles.header}>\n        { gameInfo }\n        <p className={styles.gameMessage}>{ message }</p>\n        { chunk(buttons, Math.ceil(buttons.length / 3)).map(\n            (buttonRow, rowIndex) =>\n              <div key={rowIndex}>\n                { buttonRow.map(button =>\n                    <GameButton key={button.number} button={button} onClick={onButtonClick} />\n                  )\n                }\n              </div>\n          )\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styles from './index.module.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App className={styles.body} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__1Jh3p\",\"header\":\"App_header__2MS2l\",\"gameMessage\":\"App_gameMessage__BM14P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game-button\":\"GameButton_game-button__1qbin\",\"greenGameButton\":\"GameButton_greenGameButton__1AZyO GameButton_game-button__1qbin\",\"redGameButton\":\"GameButton_redGameButton__1xWk- GameButton_game-button__1qbin\",\"blueGameButton\":\"GameButton_blueGameButton__3g-JK GameButton_game-button__1qbin\",\"yellowGameButton\":\"GameButton_yellowGameButton__2uKPY GameButton_game-button__1qbin\",\"purpleGameButton\":\"GameButton_purpleGameButton__1lHbG GameButton_game-button__1qbin\",\"orangeGameButton\":\"GameButton_orangeGameButton__UvuMu GameButton_game-button__1qbin\",\"pinkGameButton\":\"GameButton_pinkGameButton__6x9Ct GameButton_game-button__1qbin\"};"],"sourceRoot":""}