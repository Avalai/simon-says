{"version":3,"sources":["components/App/App.module.css","components/ChallengeMessage/ChallengeMessage.module.css","components/GameButton/GameButton.module.css","constants/constants.js","components/ChallengeMessage/ChallengeMessage.js","components/GameButton/GameButton.js","components/Instructions/Instructions.js","components/GameOverMessage/GameOverMessage.js","components/GameText/GameText.js","components/App/App.js","hooks/useSimonSays/useSimonSays.js","serviceWorker.js","index.js"],"names":["module","exports","STATE","SETUP","PLAY","END","BUTTONS","number","color","randomButton","sample","PHRASE","COLOR","NUMBER","randomPhrase","GAME_LOSS_TYPE","BUTTON","TIME","SIMON","TIMEOUT","ChallengeMessage","goalButton","simonSays","phraseType","prompt","textColor","buttonDescription","className","styles","challengeMessage","GameButton","button","onClick","Instructions","style","textAlign","GameOverMessage","lossType","challengeIndex","lossExplanation","GameText","simonSaysState","gameState","App","useState","setGameState","setChallengeIndex","setGoalButton","setSimonSays","setPhraseType","setTextColor","setLossType","endGame","useCallback","gameLossType","nextChallenge","newPhrase","newGoalButton","newTextColor","newSimonSays","Math","random","isEqual","index","useEffect","challengeTimeout","setTimeout","clearTimeout","onButtonClick","useSimonSays","root","header","chunk","ceil","length","map","buttonRow","rowIndex","key","Boolean","window","location","hostname","match","ReactDOM","render","body","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e71b4b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__1Jh3p\",\"header\":\"App_header__2MS2l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colors\":\"\\\"../../styles/colors.module.css\\\"\",\"challengeMessage\":\"ChallengeMessage_challengeMessage__1zV0w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colors\":\"\\\"../../styles/colors.module.css\\\"\",\"blue\":\"#3dc8ff\",\"red\":\"#ff3d3d\",\"green\":\"#00e817\",\"orange\":\"#fa9600\",\"pink\":\"#ff73d3\",\"purple\":\"#9e54ff\",\"yellow\":\"#ede615\",\"game-button\":\"GameButton_game-button__1qbin\",\"greenGameButton\":\"GameButton_greenGameButton__1AZyO GameButton_game-button__1qbin\",\"redGameButton\":\"GameButton_redGameButton__1xWk- GameButton_game-button__1qbin\",\"blueGameButton\":\"GameButton_blueGameButton__3g-JK GameButton_game-button__1qbin\",\"yellowGameButton\":\"GameButton_yellowGameButton__2uKPY GameButton_game-button__1qbin\",\"purpleGameButton\":\"GameButton_purpleGameButton__1lHbG GameButton_game-button__1qbin\",\"orangeGameButton\":\"GameButton_orangeGameButton__UvuMu GameButton_game-button__1qbin\",\"pinkGameButton\":\"GameButton_pinkGameButton__6x9Ct GameButton_game-button__1qbin\"};","import { sample } from 'lodash'\n\nexport const STATE = {\n  SETUP: 'SETUP',\n  PLAY: 'PLAY',\n  END: 'END'\n}\n\nexport const COLORS = {\n  red: 'red',\n  orange: 'orange',\n  blue: 'blue',\n  green: 'green',\n  purple: 'purple',\n  pink: 'pink',\n  yellow: 'yellow'\n}\nexport const randomColor = () => sample(COLORS)\n\n// Buttons can be colored yellow, red, blue, green, purple, orange, pink\nexport const BUTTONS = [\n  { number: 1, color: 'yellow' },\n  { number: 2, color: 'red' },\n  { number: 3, color: 'blue' },\n  { number: 4, color: 'green' }\n]\nexport const randomButton = () => sample(BUTTONS)\n\n// The attribute that Simon uses to describe the button.\nexport const PHRASE = {\n  COLOR: 'COLOR',\n  NUMBER: 'NUMBER'\n}\nexport const randomPhrase = () => sample(PHRASE)\n\nexport const GAME_LOSS_TYPE = {\n  BUTTON: 'BUTTON',\n  TIME: 'TIME',\n  SIMON: 'SIMON'\n}\n\nexport const TIMEOUT = 2000\n","import React from 'react';\nimport styles from './ChallengeMessage.module.css';\nimport { PHRASE } from '../../constants/constants'\n\nexport default function ChallengeMessage(\n  {\n    goalButton,\n    simonSays,\n    phraseType,\n    textColor\n  }) {\n\n  const prompt = simonSays ? 'Simon says press' : 'Press'\n  const buttonDescription =\n      phraseType === PHRASE.COLOR ?\n        `the ${goalButton.color} button` :\n        `button number ${goalButton.number}`\n\n  return (\n    <p className={styles.challengeMessage}>\n      {prompt} {buttonDescription}\n    </p>\n  )\n}\n","import React from 'react';\nimport styles from './GameButton.module.css';\n\nexport default function GameButton({ button, onClick }) {\n  const { number, color } = button\n  return (\n    <button\n      className={styles[`${color}GameButton`]}\n      onClick={() => onClick(button)}\n    >\n      { number }\n    </button>\n  );\n}\n","import React from 'react'\n\nexport default function Instructions() {\n  return (\n    <>\n      <p>Simply press the buttons that Simon asks you to.</p>\n      <p><strong>You lose</strong> if you:</p>\n      <ul style={{ textAlign: 'left' }}>\n        <li>Press the wrong button</li>\n        <li>Do anything without Simon</li>\n        <li>Take too long</li>\n      </ul>\n    </>\n  )\n}","import React from 'react';\nimport { GAME_LOSS_TYPE } from '../../constants/constants'\n\nexport default function GameOverMessage({ lossType, challengeIndex }) {\n\n  const lossExplanation =\n    lossType === GAME_LOSS_TYPE.BUTTON ?\n      'You pressed the wrong button.' :\n      (lossType === GAME_LOSS_TYPE.SIMON) ?\n        \"I didn't say Simon says!\" :\n        'You took too long to respond!'\n\n  return (\n    <>\n      <p>{ lossExplanation }</p>\n      <p>You made it through {challengeIndex} challenge{challengeIndex === 1 ? '' : 's'}.</p>\n      <p><em>Press any button to restart.</em></p>\n    </>\n  )\n}\n","import React from 'react';\nimport { STATE } from '../../constants/constants'\nimport Instructions from '../Instructions/Instructions';\nimport ChallengeMessage from '../ChallengeMessage/ChallengeMessage';\nimport GameOverMessage from '../GameOverMessage/GameOverMessage';\n\nexport default function GameText({ simonSaysState }) {\n  const { goalButton, lossType, simonSays, phraseType, challengeIndex } = simonSaysState\n  switch (simonSaysState.gameState) {\n    case STATE.SETUP:\n      return (\n        <>\n          <Instructions />\n          <ChallengeMessage\n            goalButton={goalButton}\n            simonSays={simonSays}\n            phraseType={phraseType}\n          />\n        </>\n      )\n    case STATE.PLAY:\n      return (\n        <ChallengeMessage\n          goalButton={goalButton}\n          simonSays={simonSays}\n          phraseType={phraseType}\n        />\n      )\n    case STATE.END:\n      return (\n        <GameOverMessage lossType={lossType} challengeIndex={challengeIndex} />\n      )\n    default:\n      return 'Invalid game state!'\n  }\n}\n","import React from 'react'\nimport styles from './App.module.css'\nimport useSimonSays from '../../hooks/useSimonSays/useSimonSays'\nimport { BUTTONS } from '../../constants/constants'\nimport GameButton from '../GameButton/GameButton'\nimport { chunk } from 'lodash'\nimport GameText from '../GameText/GameText'\n\nfunction App() {\n  const { onButtonClick, simonSaysState } = useSimonSays()\n  return (\n    <div className={styles.root}>\n      <header className={styles.header}>\n        <GameText simonSaysState={simonSaysState} />\n\n        { chunk(BUTTONS, Math.ceil(BUTTONS.length / 3)).map(\n            (buttonRow, rowIndex) =>\n              <div key={rowIndex}>\n                { buttonRow.map(button =>\n                    <GameButton key={button.number} button={button} onClick={onButtonClick} />\n                  )\n                }\n              </div>\n          )\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect, useCallback } from 'react'\nimport { isEqual } from 'lodash'\nimport Phrase from '../../components/ChallengeMessage/ChallengeMessage'\nimport {\n  STATE,\n  randomPhrase,\n  randomButton,\n  BUTTONS,\n  GAME_LOSS_TYPE,\n  TIMEOUT\n} from '../../constants/constants'\n\n\nexport default function useSimonSays() {\n  const [gameState, setGameState] = useState(STATE.SETUP)\n  const [challengeIndex, setChallengeIndex] = useState(0)\n\n  const [goalButton, setGoalButton] = useState(randomButton())\n  const [simonSays, setSimonSays] = useState(true)\n  const [phraseType, setPhraseType] = useState(randomPhrase())\n  const [textColor, setTextColor] = useState(randomButton().color)\n\n  const [lossType, setLossType] = useState('')\n\n  const endGame = useCallback(gameLossType => {\n    setLossType(gameLossType)\n    setGameState(STATE.END)\n  }, [setLossType, setGameState])\n\n  // Count a success and present the user with the next challenge.\n  const nextChallenge = useCallback(() => {\n    const newPhrase = randomPhrase()\n    const newGoalButton = randomButton()\n    const newTextColor = randomButton().color\n\n    // Slightly more likely to get Simon than not.\n    const newSimonSays = Math.random() < 3 / 5\n\n\n    if (newPhrase === phraseType &&\n      isEqual(newGoalButton, goalButton) &&\n      newSimonSays === simonSays &&\n      newTextColor === textColor\n    ) {\n      // Challenge did not change, so reroll.\n      nextChallenge()\n    } else {\n      setChallengeIndex(index => index + 1)\n      setPhraseType(newPhrase)\n      setGoalButton(newGoalButton)\n      setSimonSays(newSimonSays)\n      setTextColor(newTextColor)\n    }\n  }, [phraseType, goalButton, simonSays, textColor])\n\n  const onButtonClick = (button) => {\n    // Restart the game when it's done.\n    if (gameState === STATE.END) {\n      setGameState(STATE.PLAY)\n      setChallengeIndex(0)\n      return\n    }\n\n    // Enable timed responses after the first response.\n    if (gameState === STATE.SETUP) {\n      setGameState(STATE.PLAY)\n    }\n\n    // Check the clicked button against the challenge.\n    if (!simonSays) {\n      endGame(GAME_LOSS_TYPE.SIMON)\n    } else if (isEqual(button, goalButton)) {\n      nextChallenge()\n    } else {\n      endGame(GAME_LOSS_TYPE.BUTTON)\n    }\n  }\n\n  useEffect(() => {\n    // Only time the challenges once the user has started playing.\n    if (gameState !== STATE.PLAY) {\n      return\n    }\n\n    const challengeTimeout = setTimeout(\n      () => {\n        // Missed Simon-says challenge.\n        if (simonSays) {\n          endGame(GAME_LOSS_TYPE.TIME)\n        } else {\n          // They successfully didn't complete a nonSimon challenge.\n          nextChallenge()\n        }\n      }, TIMEOUT\n    )\n    return () => clearTimeout(challengeTimeout)\n  }, [challengeIndex, gameState, simonSays, endGame, nextChallenge])\n\n  return (\n    { onButtonClick\n    , simonSaysState:\n      {\n        gameState,\n        goalButton,\n        simonSays,\n        lossType,\n        phraseType,\n        challengeIndex\n      }\n    }\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styles from './index.module.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App className={styles.body} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}